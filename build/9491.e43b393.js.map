{"version":3,"file":"9491.e43b393.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/inspector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/splitpanel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/raweditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/plugineditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/pluginlist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/settingeditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/settingeditor/lib/tokens.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { InspectionHandler, InspectorPanel } from '@jupyterlab/inspector';\nimport { RenderMimeRegistry, standardRendererFactories } from '@jupyterlab/rendermime';\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * Create a raw editor inspector.\n */\nexport function createInspector(editor, rendermime, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const connector = new InspectorConnector(editor, translator);\n    const inspector = new InspectorPanel({\n        initialContent: trans.__('Any errors will be listed here'),\n        translator: translator\n    });\n    const handler = new InspectionHandler({\n        connector,\n        rendermime: rendermime ||\n            new RenderMimeRegistry({\n                initialFactories: standardRendererFactories,\n                translator: translator\n            })\n    });\n    inspector.addClass('jp-SettingsDebug');\n    inspector.source = handler;\n    handler.editor = editor.source;\n    return inspector;\n}\n/**\n * The data connector used to populate a code inspector.\n *\n * #### Notes\n * This data connector debounces fetch requests to throttle them at no more than\n * one request per 100ms. This means that using the connector to populate\n * multiple client objects can lead to missed fetch responses.\n */\nclass InspectorConnector extends DataConnector {\n    constructor(editor, translator) {\n        super();\n        this._current = 0;\n        this.translator = translator || nullTranslator;\n        this._editor = editor;\n        this._trans = this.translator.load('jupyterlab');\n    }\n    /**\n     * Fetch inspection requests.\n     */\n    fetch(request) {\n        return new Promise(resolve => {\n            // Debounce requests at a rate of 100ms.\n            const current = (this._current = window.setTimeout(() => {\n                if (current !== this._current) {\n                    return resolve(undefined);\n                }\n                const errors = this._validate(request.text);\n                if (!errors) {\n                    return resolve({\n                        data: { 'text/markdown': this._trans.__('No errors found') },\n                        metadata: {}\n                    });\n                }\n                resolve({ data: Private.render(errors), metadata: {} });\n            }, 100));\n        });\n    }\n    _validate(raw) {\n        const editor = this._editor;\n        if (!editor.settings) {\n            return null;\n        }\n        const { id, schema, version } = editor.settings;\n        const data = { composite: {}, user: {} };\n        const validator = editor.registry.validator;\n        return validator.validateData({ data, id, raw, schema, version }, false);\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Render validation errors as an HTML string.\n     */\n    function render(errors) {\n        return { 'text/markdown': errors.map(renderError).join('') };\n    }\n    Private.render = render;\n    /**\n     * Render an individual validation error as a markdown string.\n     */\n    function renderError(error) {\n        var _a;\n        switch (error.keyword) {\n            case 'additionalProperties':\n                return `**\\`[additional property error]\\`**\n          \\`${(_a = error.params) === null || _a === void 0 ? void 0 : _a.additionalProperty}\\` is not a valid property`;\n            case 'syntax':\n                return `**\\`[syntax error]\\`** *${error.message}*`;\n            case 'type':\n                return `**\\`[type error]\\`**\n          \\`${error.dataPath}\\` ${error.message}`;\n            default:\n                return `**\\`[error]\\`** *${error.message}*`;\n        }\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=inspector.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Signal } from '@lumino/signaling';\nimport { SplitPanel as SPanel } from '@lumino/widgets';\n/**\n * A deprecated split panel that will be removed when the phosphor split panel\n * supports a handle moved signal. See https://github.com/phosphorjs/phosphor/issues/297.\n */\nexport class SplitPanel extends SPanel {\n    constructor() {\n        super(...arguments);\n        /**\n         * Emits when the split handle has moved.\n         */\n        this.handleMoved = new Signal(this);\n    }\n    handleEvent(event) {\n        super.handleEvent(event);\n        if (event.type === 'mouseup') {\n            this.handleMoved.emit(undefined);\n        }\n    }\n}\n//# sourceMappingURL=splitpanel.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandToolbarButton, Toolbar } from '@jupyterlab/apputils';\nimport { CodeEditor, CodeEditorWrapper } from '@jupyterlab/codeeditor';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { Signal } from '@lumino/signaling';\nimport { BoxLayout, Widget } from '@lumino/widgets';\nimport { createInspector } from './inspector';\nimport { SplitPanel } from './splitpanel';\n/**\n * A class name added to all raw editors.\n */\nconst RAW_EDITOR_CLASS = 'jp-SettingsRawEditor';\n/**\n * A class name added to the user settings editor.\n */\nconst USER_CLASS = 'jp-SettingsRawEditor-user';\n/**\n * A class name added to the user editor when there are validation errors.\n */\nconst ERROR_CLASS = 'jp-mod-error';\n/**\n * A raw JSON settings editor.\n */\nexport class RawEditor extends SplitPanel {\n    /**\n     * Create a new plugin editor.\n     */\n    constructor(options) {\n        super({\n            orientation: 'horizontal',\n            renderer: SplitPanel.defaultRenderer,\n            spacing: 1\n        });\n        this._canRevert = false;\n        this._canSave = false;\n        this._commandsChanged = new Signal(this);\n        this._settings = null;\n        this._toolbar = new Toolbar();\n        const { commands, editorFactory, registry, translator } = options;\n        this.registry = registry;\n        this.translator = translator || nullTranslator;\n        this._commands = commands;\n        // Create read-only defaults editor.\n        const defaults = (this._defaults = new CodeEditorWrapper({\n            model: new CodeEditor.Model(),\n            factory: editorFactory\n        }));\n        defaults.editor.model.value.text = '';\n        defaults.editor.model.mimeType = 'text/javascript';\n        defaults.editor.setOption('readOnly', true);\n        // Create read-write user settings editor.\n        const user = (this._user = new CodeEditorWrapper({\n            model: new CodeEditor.Model(),\n            factory: editorFactory,\n            config: { lineNumbers: true }\n        }));\n        user.addClass(USER_CLASS);\n        user.editor.model.mimeType = 'text/javascript';\n        user.editor.model.value.changed.connect(this._onTextChanged, this);\n        // Create and set up an inspector.\n        this._inspector = createInspector(this, options.rendermime, this.translator);\n        this.addClass(RAW_EDITOR_CLASS);\n        // FIXME-TRANS: onSaveError must have an optional translator?\n        this._onSaveError = options.onSaveError;\n        this.addWidget(Private.defaultsEditor(defaults, this.translator));\n        this.addWidget(Private.userEditor(user, this._toolbar, this._inspector, this.translator));\n    }\n    /**\n     * Whether the raw editor revert functionality is enabled.\n     */\n    get canRevert() {\n        return this._canRevert;\n    }\n    /**\n     * Whether the raw editor save functionality is enabled.\n     */\n    get canSave() {\n        return this._canSave;\n    }\n    /**\n     * Emits when the commands passed in at instantiation change.\n     */\n    get commandsChanged() {\n        return this._commandsChanged;\n    }\n    /**\n     * Tests whether the settings have been modified and need saving.\n     */\n    get isDirty() {\n        var _a, _b;\n        return (_b = this._user.editor.model.value.text !== ((_a = this._settings) === null || _a === void 0 ? void 0 : _a.raw)) !== null && _b !== void 0 ? _b : '';\n    }\n    /**\n     * The plugin settings being edited.\n     */\n    get settings() {\n        return this._settings;\n    }\n    set settings(settings) {\n        if (!settings && !this._settings) {\n            return;\n        }\n        const samePlugin = settings && this._settings && settings.plugin === this._settings.plugin;\n        if (samePlugin) {\n            return;\n        }\n        const defaults = this._defaults;\n        const user = this._user;\n        // Disconnect old settings change handler.\n        if (this._settings) {\n            this._settings.changed.disconnect(this._onSettingsChanged, this);\n        }\n        if (settings) {\n            this._settings = settings;\n            this._settings.changed.connect(this._onSettingsChanged, this);\n            this._onSettingsChanged();\n        }\n        else {\n            this._settings = null;\n            defaults.editor.model.value.text = '';\n            user.editor.model.value.text = '';\n        }\n        this.update();\n    }\n    /**\n     * Get the relative sizes of the two editor panels.\n     */\n    get sizes() {\n        return this.relativeSizes();\n    }\n    set sizes(sizes) {\n        this.setRelativeSizes(sizes);\n    }\n    /**\n     * The inspectable source editor for user input.\n     */\n    get source() {\n        return this._user.editor;\n    }\n    /**\n     * Dispose of the resources held by the raw editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this._defaults.dispose();\n        this._user.dispose();\n    }\n    /**\n     * Revert the editor back to original settings.\n     */\n    revert() {\n        var _a, _b;\n        this._user.editor.model.value.text = (_b = (_a = this.settings) === null || _a === void 0 ? void 0 : _a.raw) !== null && _b !== void 0 ? _b : '';\n        this._updateToolbar(false, false);\n    }\n    /**\n     * Save the contents of the raw editor.\n     */\n    save() {\n        if (!this.isDirty || !this._settings) {\n            return Promise.resolve(undefined);\n        }\n        const settings = this._settings;\n        const source = this._user.editor.model.value.text;\n        return settings\n            .save(source)\n            .then(() => {\n            this._updateToolbar(false, false);\n        })\n            .catch(reason => {\n            this._updateToolbar(true, false);\n            this._onSaveError(reason, this.translator);\n        });\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        Private.populateToolbar(this._commands, this._toolbar);\n        this.update();\n    }\n    /**\n     * Handle `'update-request'` messages.\n     */\n    onUpdateRequest(msg) {\n        const settings = this._settings;\n        const defaults = this._defaults;\n        const user = this._user;\n        if (settings) {\n            defaults.editor.refresh();\n            user.editor.refresh();\n        }\n    }\n    /**\n     * Handle text changes in the underlying editor.\n     */\n    _onTextChanged() {\n        const raw = this._user.editor.model.value.text;\n        const settings = this._settings;\n        this.removeClass(ERROR_CLASS);\n        // If there are no settings loaded or there are no changes, bail.\n        if (!settings || settings.raw === raw) {\n            this._updateToolbar(false, false);\n            return;\n        }\n        const errors = settings.validate(raw);\n        if (errors) {\n            this.addClass(ERROR_CLASS);\n            this._updateToolbar(true, false);\n            return;\n        }\n        this._updateToolbar(true, true);\n    }\n    /**\n     * Handle updates to the settings.\n     */\n    _onSettingsChanged() {\n        var _a, _b;\n        const settings = this._settings;\n        const defaults = this._defaults;\n        const user = this._user;\n        defaults.editor.model.value.text = (_a = settings === null || settings === void 0 ? void 0 : settings.annotatedDefaults()) !== null && _a !== void 0 ? _a : '';\n        user.editor.model.value.text = (_b = settings === null || settings === void 0 ? void 0 : settings.raw) !== null && _b !== void 0 ? _b : '';\n    }\n    _updateToolbar(revert = this._canRevert, save = this._canSave) {\n        const commands = this._commands;\n        this._canRevert = revert;\n        this._canSave = save;\n        this._commandsChanged.emit([commands.revert, commands.save]);\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Returns the wrapped setting defaults editor.\n     */\n    function defaultsEditor(editor, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const widget = new Widget();\n        const layout = (widget.layout = new BoxLayout({ spacing: 0 }));\n        const banner = new Widget();\n        const bar = new Toolbar();\n        const defaultTitle = trans.__('System Defaults');\n        banner.node.innerText = defaultTitle;\n        bar.insertItem(0, 'banner', banner);\n        layout.addWidget(bar);\n        layout.addWidget(editor);\n        return widget;\n    }\n    Private.defaultsEditor = defaultsEditor;\n    /**\n     * Populate the raw editor toolbar.\n     */\n    function populateToolbar(commands, toolbar) {\n        const { registry, revert, save } = commands;\n        toolbar.addItem('spacer', Toolbar.createSpacerItem());\n        // Note the button order. The rationale here is that no matter what state\n        // the toolbar is in, the relative location of the revert button in the\n        // toolbar remains the same.\n        [revert, save].forEach(name => {\n            const item = new CommandToolbarButton({ commands: registry, id: name });\n            toolbar.addItem(name, item);\n        });\n    }\n    Private.populateToolbar = populateToolbar;\n    /**\n     * Returns the wrapped user overrides editor.\n     */\n    function userEditor(editor, toolbar, inspector, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const userTitle = trans.__('User Preferences');\n        const widget = new Widget();\n        const layout = (widget.layout = new BoxLayout({ spacing: 0 }));\n        const banner = new Widget();\n        banner.node.innerText = userTitle;\n        toolbar.insertItem(0, 'banner', banner);\n        layout.addWidget(toolbar);\n        layout.addWidget(editor);\n        layout.addWidget(inspector);\n        return widget;\n    }\n    Private.userEditor = userEditor;\n})(Private || (Private = {}));\n//# sourceMappingURL=raweditor.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { StackedLayout, Widget } from '@lumino/widgets';\nimport { RawEditor } from './raweditor';\n/**\n * The class name added to all plugin editors.\n */\nconst PLUGIN_EDITOR_CLASS = 'jp-PluginEditor';\n/**\n * An individual plugin settings editor.\n */\nexport class PluginEditor extends Widget {\n    /**\n     * Create a new plugin editor.\n     *\n     * @param options - The plugin editor instantiation options.\n     */\n    constructor(options) {\n        super();\n        this._settings = null;\n        this._stateChanged = new Signal(this);\n        this.addClass(PLUGIN_EDITOR_CLASS);\n        const { commands, editorFactory, registry, rendermime, translator } = options;\n        this.translator = translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        // TODO: Remove this layout. We were using this before when we\n        // when we had a way to switch between the raw and table editor\n        // Now, the raw editor is the only child and probably could merged into\n        // this class directly in the future.\n        const layout = (this.layout = new StackedLayout());\n        const { onSaveError } = Private;\n        this.raw = this._rawEditor = new RawEditor({\n            commands,\n            editorFactory,\n            onSaveError,\n            registry,\n            rendermime,\n            translator\n        });\n        this._rawEditor.handleMoved.connect(this._onStateChanged, this);\n        layout.addWidget(this._rawEditor);\n    }\n    /**\n     * Tests whether the settings have been modified and need saving.\n     */\n    get isDirty() {\n        return this._rawEditor.isDirty;\n    }\n    /**\n     * The plugin settings being edited.\n     */\n    get settings() {\n        return this._settings;\n    }\n    set settings(settings) {\n        if (this._settings === settings) {\n            return;\n        }\n        const raw = this._rawEditor;\n        this._settings = raw.settings = settings;\n        this.update();\n    }\n    /**\n     * The plugin editor layout state.\n     */\n    get state() {\n        const plugin = this._settings ? this._settings.id : '';\n        const { sizes } = this._rawEditor;\n        return { plugin, sizes };\n    }\n    set state(state) {\n        if (JSONExt.deepEqual(this.state, state)) {\n            return;\n        }\n        this._rawEditor.sizes = state.sizes;\n        this.update();\n    }\n    /**\n     * A signal that emits when editor layout state changes and needs to be saved.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * If the editor is in a dirty state, confirm that the user wants to leave.\n     */\n    confirm() {\n        if (this.isHidden || !this.isAttached || !this.isDirty) {\n            return Promise.resolve(undefined);\n        }\n        return showDialog({\n            title: this._trans.__('You have unsaved changes.'),\n            body: this._trans.__('Do you want to leave without saving?'),\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.okButton({ label: this._trans.__('Ok') })\n            ]\n        }).then(result => {\n            if (!result.button.accept) {\n                throw new Error('User canceled.');\n            }\n        });\n    }\n    /**\n     * Dispose of the resources held by the plugin editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this._rawEditor.dispose();\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        this.update();\n    }\n    /**\n     * Handle `'update-request'` messages.\n     */\n    onUpdateRequest(msg) {\n        const raw = this._rawEditor;\n        const settings = this._settings;\n        if (!settings) {\n            this.hide();\n            return;\n        }\n        this.show();\n        raw.show();\n    }\n    /**\n     * Handle layout state changes that need to be saved.\n     */\n    _onStateChanged() {\n        this.stateChanged.emit(undefined);\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Handle save errors.\n     */\n    function onSaveError(reason, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        console.error(`Saving setting editor value failed: ${reason.message}`);\n        void showDialog({\n            title: trans.__('Your changes were not saved.'),\n            body: reason.message,\n            buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n        });\n    }\n    Private.onSaveError = onSaveError;\n})(Private || (Private = {}));\n//# sourceMappingURL=plugineditor.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { classes, LabIcon, settingsIcon } from '@jupyterlab/ui-components';\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n/**\n * A list of plugins with editable settings.\n */\nexport class PluginList extends Widget {\n    /**\n     * Create a new plugin list.\n     */\n    constructor(options) {\n        super();\n        this._changed = new Signal(this);\n        this._scrollTop = 0;\n        this._selection = '';\n        this.registry = options.registry;\n        this.translator = options.translator || nullTranslator;\n        this.addClass('jp-PluginList');\n        this._confirm = options.confirm;\n        this.registry.pluginChanged.connect(() => {\n            this.update();\n        }, this);\n    }\n    /**\n     * A signal emitted when a list user interaction happens.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The selection value of the plugin list.\n     */\n    get scrollTop() {\n        var _a;\n        return (_a = this.node.querySelector('ul')) === null || _a === void 0 ? void 0 : _a.scrollTop;\n    }\n    /**\n     * The selection value of the plugin list.\n     */\n    get selection() {\n        return this._selection;\n    }\n    set selection(selection) {\n        if (this._selection === selection) {\n            return;\n        }\n        this._selection = selection;\n        this.update();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the plugin list's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMousedown(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `'after-attach'` messages.\n     */\n    onAfterAttach(msg) {\n        this.node.addEventListener('mousedown', this);\n        this.update();\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        this.node.removeEventListener('mousedown', this);\n    }\n    /**\n     * Handle `'update-request'` messages.\n     */\n    onUpdateRequest(msg) {\n        const { node, registry } = this;\n        const selection = this._selection;\n        const translation = this.translator;\n        Private.populateList(registry, selection, node, translation);\n        const ul = node.querySelector('ul');\n        if (ul && this._scrollTop !== undefined) {\n            ul.scrollTop = this._scrollTop;\n        }\n    }\n    /**\n     * Handle the `'mousedown'` event for the plugin list.\n     *\n     * @param event - The DOM event sent to the widget\n     */\n    _evtMousedown(event) {\n        event.preventDefault();\n        let target = event.target;\n        let id = target.getAttribute('data-id');\n        if (id === this._selection) {\n            return;\n        }\n        if (!id) {\n            while (!id && target !== this.node) {\n                target = target.parentElement;\n                id = target.getAttribute('data-id');\n            }\n        }\n        if (!id) {\n            return;\n        }\n        this._confirm()\n            .then(() => {\n            this._scrollTop = this.scrollTop;\n            this._selection = id;\n            this._changed.emit(undefined);\n            this.update();\n        })\n            .catch(() => {\n            /* no op */\n        });\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The JupyterLab plugin schema key for the setting editor\n     * icon class of a plugin.\n     */\n    const ICON_KEY = 'jupyter.lab.setting-icon';\n    /**\n     * The JupyterLab plugin schema key for the setting editor\n     * icon class of a plugin.\n     */\n    const ICON_CLASS_KEY = 'jupyter.lab.setting-icon-class';\n    /**\n     * The JupyterLab plugin schema key for the setting editor\n     * icon label of a plugin.\n     */\n    const ICON_LABEL_KEY = 'jupyter.lab.setting-icon-label';\n    /**\n     * Check the plugin for a rendering hint's value.\n     *\n     * #### Notes\n     * The order of priority for overridden hints is as follows, from most\n     * important to least:\n     * 1. Data set by the end user in a settings file.\n     * 2. Data set by the plugin author as a schema default.\n     * 3. Data set by the plugin author as a top-level key of the schema.\n     */\n    function getHint(key, registry, plugin) {\n        // First, give priority to checking if the hint exists in the user data.\n        let hint = plugin.data.user[key];\n        // Second, check to see if the hint exists in composite data, which folds\n        // in default values from the schema.\n        if (!hint) {\n            hint = plugin.data.composite[key];\n        }\n        // Third, check to see if the plugin schema has defined the hint.\n        if (!hint) {\n            hint = plugin.schema[key];\n        }\n        // Finally, use the defaults from the registry schema.\n        if (!hint) {\n            const { properties } = registry.schema;\n            hint = properties && properties[key] && properties[key].default;\n        }\n        return typeof hint === 'string' ? hint : '';\n    }\n    /**\n     * Populate the plugin list.\n     */\n    function populateList(registry, selection, node, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const plugins = sortPlugins(registry).filter(plugin => {\n            const { schema } = plugin;\n            const deprecated = schema['jupyter.lab.setting-deprecated'] === true;\n            const editable = Object.keys(schema.properties || {}).length > 0;\n            const extensible = schema.additionalProperties !== false;\n            return !deprecated && (editable || extensible);\n        });\n        const items = plugins.map(plugin => {\n            const { id, schema, version } = plugin;\n            const title = typeof schema.title === 'string'\n                ? trans._p('schema', schema.title)\n                : id;\n            const description = typeof schema.description === 'string'\n                ? trans._p('schema', schema.description)\n                : '';\n            const itemTitle = `${description}\\n${id}\\n${version}`;\n            const icon = getHint(ICON_KEY, registry, plugin);\n            const iconClass = getHint(ICON_CLASS_KEY, registry, plugin);\n            const iconTitle = getHint(ICON_LABEL_KEY, registry, plugin);\n            return (React.createElement(\"li\", { className: id === selection ? 'jp-mod-selected' : '', \"data-id\": id, key: id, title: itemTitle },\n                React.createElement(LabIcon.resolveReact, { icon: icon || (iconClass ? undefined : settingsIcon), iconClass: classes(iconClass, 'jp-Icon'), title: iconTitle, tag: \"span\", stylesheet: \"settingsEditor\" }),\n                React.createElement(\"span\", null, title)));\n        });\n        ReactDOM.unmountComponentAtNode(node);\n        ReactDOM.render(React.createElement(\"ul\", null, items), node);\n    }\n    Private.populateList = populateList;\n    /**\n     * Sort a list of plugins by title and ID.\n     */\n    function sortPlugins(registry) {\n        return Object.keys(registry.plugins)\n            .map(plugin => registry.plugins[plugin])\n            .sort((a, b) => {\n            return (a.schema.title || a.id).localeCompare(b.schema.title || b.id);\n        });\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=pluginlist.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { jupyterIcon } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { PluginEditor } from './plugineditor';\nimport { PluginList } from './pluginlist';\nimport { SplitPanel } from './splitpanel';\n/**\n * The ratio panes in the setting editor.\n */\nconst DEFAULT_LAYOUT = {\n    sizes: [1, 3],\n    container: {\n        editor: 'raw',\n        plugin: '',\n        sizes: [1, 1]\n    }\n};\n/**\n * An interface for modifying and saving application settings.\n */\nexport class SettingEditor extends Widget {\n    /**\n     * Create a new setting editor.\n     */\n    constructor(options) {\n        super();\n        this._fetching = null;\n        this._saving = false;\n        this._state = JSONExt.deepCopy(DEFAULT_LAYOUT);\n        this.translator = options.translator || nullTranslator;\n        this.addClass('jp-SettingEditor');\n        this.key = options.key;\n        this.state = options.state;\n        const { commands, editorFactory, rendermime } = options;\n        const layout = (this.layout = new PanelLayout());\n        const registry = (this.registry = options.registry);\n        const panel = (this._panel = new SplitPanel({\n            orientation: 'horizontal',\n            renderer: SplitPanel.defaultRenderer,\n            spacing: 1\n        }));\n        const instructions = (this._instructions = new Widget());\n        const editor = (this._editor = new PluginEditor({\n            commands,\n            editorFactory,\n            registry,\n            rendermime,\n            translator: this.translator\n        }));\n        const confirm = () => editor.confirm();\n        const list = (this._list = new PluginList({\n            confirm,\n            registry,\n            translator: this.translator\n        }));\n        const when = options.when;\n        instructions.addClass('jp-SettingEditorInstructions');\n        Private.populateInstructionsNode(instructions.node, this.translator);\n        if (when) {\n            this._when = Array.isArray(when) ? Promise.all(when) : when;\n        }\n        panel.addClass('jp-SettingEditor-main');\n        layout.addWidget(panel);\n        panel.addWidget(list);\n        panel.addWidget(instructions);\n        SplitPanel.setStretch(list, 0);\n        SplitPanel.setStretch(instructions, 1);\n        SplitPanel.setStretch(editor, 1);\n        editor.stateChanged.connect(this._onStateChanged, this);\n        list.changed.connect(this._onStateChanged, this);\n        panel.handleMoved.connect(this._onStateChanged, this);\n    }\n    /**\n     * Whether the raw editor revert functionality is enabled.\n     */\n    get canRevertRaw() {\n        return this._editor.raw.canRevert;\n    }\n    /**\n     * Whether the raw editor save functionality is enabled.\n     */\n    get canSaveRaw() {\n        return this._editor.raw.canSave;\n    }\n    /**\n     * Emits when the commands passed in at instantiation change.\n     */\n    get commandsChanged() {\n        return this._editor.raw.commandsChanged;\n    }\n    /**\n     * The currently loaded settings.\n     */\n    get settings() {\n        return this._editor.settings;\n    }\n    /**\n     * The inspectable raw user editor source for the currently loaded settings.\n     */\n    get source() {\n        return this._editor.raw.source;\n    }\n    /**\n     * Dispose of the resources held by the setting editor.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this._editor.dispose();\n        this._instructions.dispose();\n        this._list.dispose();\n        this._panel.dispose();\n    }\n    /**\n     * Revert raw editor back to original settings.\n     */\n    revert() {\n        this._editor.raw.revert();\n    }\n    /**\n     * Save the contents of the raw editor.\n     */\n    save() {\n        return this._editor.raw.save();\n    }\n    /**\n     * Handle `'after-attach'` messages.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this._panel.hide();\n        this._fetchState()\n            .then(() => {\n            this._panel.show();\n            this._setState();\n        })\n            .catch(reason => {\n            console.error('Fetching setting editor state failed', reason);\n            this._panel.show();\n            this._setState();\n        });\n    }\n    /**\n     * Handle `'close-request'` messages.\n     */\n    onCloseRequest(msg) {\n        this._editor\n            .confirm()\n            .then(() => {\n            super.onCloseRequest(msg);\n            this.dispose();\n        })\n            .catch(() => {\n            /* no op */\n        });\n    }\n    /**\n     * Get the state of the panel.\n     */\n    _fetchState() {\n        if (this._fetching) {\n            return this._fetching;\n        }\n        const { key, state } = this;\n        const promises = [state.fetch(key), this._when];\n        return (this._fetching = Promise.all(promises).then(([value]) => {\n            this._fetching = null;\n            if (this._saving) {\n                return;\n            }\n            this._state = Private.normalizeState(value, this._state);\n        }));\n    }\n    /**\n     * Handle root level layout state changes.\n     */\n    async _onStateChanged() {\n        this._state.sizes = this._panel.relativeSizes();\n        this._state.container = this._editor.state;\n        this._state.container.plugin = this._list.selection;\n        try {\n            await this._saveState();\n        }\n        catch (error) {\n            console.error('Saving setting editor state failed', error);\n        }\n        this._setState();\n    }\n    /**\n     * Set the state of the setting editor.\n     */\n    async _saveState() {\n        const { key, state } = this;\n        const value = this._state;\n        this._saving = true;\n        try {\n            await state.save(key, value);\n            this._saving = false;\n        }\n        catch (error) {\n            this._saving = false;\n            throw error;\n        }\n    }\n    /**\n     * Set the layout sizes.\n     */\n    _setLayout() {\n        const editor = this._editor;\n        const panel = this._panel;\n        const state = this._state;\n        editor.state = state.container;\n        // Allow the message queue (which includes fit requests that might disrupt\n        // setting relative sizes) to clear before setting sizes.\n        requestAnimationFrame(() => {\n            panel.setRelativeSizes(state.sizes);\n        });\n    }\n    /**\n     * Set the presets of the setting editor.\n     */\n    _setState() {\n        const editor = this._editor;\n        const list = this._list;\n        const panel = this._panel;\n        const { container } = this._state;\n        if (!container.plugin) {\n            editor.settings = null;\n            list.selection = '';\n            this._setLayout();\n            return;\n        }\n        if (editor.settings && editor.settings.id === container.plugin) {\n            this._setLayout();\n            return;\n        }\n        const instructions = this._instructions;\n        this.registry\n            .load(container.plugin)\n            .then(settings => {\n            if (instructions.isAttached) {\n                instructions.parent = null;\n            }\n            if (!editor.isAttached) {\n                panel.addWidget(editor);\n            }\n            editor.settings = settings;\n            list.selection = container.plugin;\n            this._setLayout();\n        })\n            .catch(reason => {\n            console.error(`Loading ${container.plugin} settings failed.`, reason);\n            list.selection = this._state.container.plugin = '';\n            editor.settings = null;\n            this._setLayout();\n        });\n    }\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Populate the instructions text node.\n     */\n    function populateInstructionsNode(node, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        ReactDOM.render(React.createElement(React.Fragment, null,\n            React.createElement(\"h2\", null,\n                React.createElement(jupyterIcon.react, { className: \"jp-SettingEditorInstructions-icon\", tag: \"span\", elementPosition: \"center\", height: \"auto\", width: \"60px\" }),\n                React.createElement(\"span\", { className: \"jp-SettingEditorInstructions-title\" }, \"Settings\")),\n            React.createElement(\"span\", { className: \"jp-SettingEditorInstructions-text\" }, trans.__('Select a plugin from the list to view and edit its preferences.'))), node);\n    }\n    Private.populateInstructionsNode = populateInstructionsNode;\n    /**\n     * Return a normalized restored layout state that defaults to the presets.\n     */\n    function normalizeState(saved, current) {\n        if (!saved) {\n            return JSONExt.deepCopy(DEFAULT_LAYOUT);\n        }\n        if (!('sizes' in saved) || !numberArray(saved.sizes)) {\n            saved.sizes = JSONExt.deepCopy(DEFAULT_LAYOUT.sizes);\n        }\n        if (!('container' in saved)) {\n            saved.container = JSONExt.deepCopy(DEFAULT_LAYOUT.container);\n            return saved;\n        }\n        const container = 'container' in saved &&\n            saved.container &&\n            typeof saved.container === 'object'\n            ? saved.container\n            : {};\n        saved.container = {\n            plugin: typeof container.plugin === 'string'\n                ? container.plugin\n                : DEFAULT_LAYOUT.container.plugin,\n            sizes: numberArray(container.sizes)\n                ? container.sizes\n                : JSONExt.deepCopy(DEFAULT_LAYOUT.container.sizes)\n        };\n        return saved;\n    }\n    Private.normalizeState = normalizeState;\n    /**\n     * Tests whether an array consists exclusively of numbers.\n     */\n    function numberArray(value) {\n        return Array.isArray(value) && value.every(x => typeof x === 'number');\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=settingeditor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The setting editor tracker token.\n */\nexport const ISettingEditorTracker = new Token('@jupyterlab/settingeditor:ISettingEditorTracker');\n//# sourceMappingURL=tokens.js.map"],"names":["Private","InspectorConnector","DataConnector","constructor","editor","translator","super","this","_current","nullTranslator","_editor","_trans","load","fetch","request","Promise","resolve","current","window","setTimeout","undefined","errors","_validate","text","data","__","metadata","render","raw","settings","id","schema","version","registry","validator","validateData","composite","user","renderError","error","_a","keyword","params","additionalProperty","message","dataPath","map","join","SplitPanel","arguments","handleMoved","Signal","handleEvent","event","type","emit","ERROR_CLASS","RawEditor","options","orientation","renderer","defaultRenderer","spacing","_canRevert","_canSave","_commandsChanged","_settings","_toolbar","Toolbar","commands","editorFactory","_commands","defaults","_defaults","CodeEditorWrapper","model","CodeEditor","factory","value","mimeType","setOption","_user","config","lineNumbers","addClass","changed","connect","_onTextChanged","_inspector","rendermime","trans","connector","inspector","InspectorPanel","initialContent","handler","InspectionHandler","RenderMimeRegistry","initialFactories","standardRendererFactories","source","createInspector","_onSaveError","onSaveError","addWidget","defaultsEditor","userEditor","canRevert","canSave","commandsChanged","isDirty","_b","plugin","disconnect","_onSettingsChanged","update","sizes","relativeSizes","setRelativeSizes","dispose","isDisposed","revert","_updateToolbar","save","then","catch","reason","onAfterAttach","msg","populateToolbar","onUpdateRequest","refresh","removeClass","validate","annotatedDefaults","widget","Widget","layout","BoxLayout","banner","bar","defaultTitle","node","innerText","insertItem","toolbar","addItem","forEach","name","item","CommandToolbarButton","userTitle","PluginEditor","_stateChanged","StackedLayout","_rawEditor","_onStateChanged","state","JSONExt","stateChanged","confirm","isHidden","isAttached","showDialog","title","body","buttons","Dialog","label","result","button","accept","Error","show","hide","console","PluginList","_changed","_scrollTop","_selection","_confirm","pluginChanged","scrollTop","querySelector","selection","_evtMousedown","addEventListener","onBeforeDetach","removeEventListener","translation","populateList","ul","preventDefault","target","getAttribute","parentElement","getHint","key","hint","properties","default","plugins","Object","keys","sort","a","b","localeCompare","sortPlugins","filter","deprecated","editable","length","extensible","additionalProperties","items","_p","itemTitle","description","icon","iconClass","iconTitle","className","LabIcon","settingsIcon","classes","tag","stylesheet","DEFAULT_LAYOUT","container","SettingEditor","_fetching","_saving","_state","PanelLayout","panel","_panel","instructions","_instructions","list","_list","when","populateInstructionsNode","_when","Array","isArray","all","setStretch","canRevertRaw","canSaveRaw","_fetchState","_setState","onCloseRequest","promises","normalizeState","async","_saveState","_setLayout","requestAnimationFrame","parent","numberArray","every","x","jupyterIcon","elementPosition","height","width","saved","ISettingEditorTracker","Token"],"sourceRoot":""}