{"version":3,"file":"1266.4021eda.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/app.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/router.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/server.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/service.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Application } from '@lumino/application';\n/**\n * Server is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLiteServer extends Application {\n    /**\n     * Construct a new JupyterLite object.\n     *\n     * @param options The instantiation options for a JupyterLiteServer application.\n     */\n    constructor(options) {\n        super(options);\n        /**\n         * The name of the application.\n         */\n        this.name = 'JupyterLite Server';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The version of the application.\n         */\n        this.version = 'unknown';\n        this._serviceManager = null;\n    }\n    /**\n     * Get the underlying lite service manager for this app.\n     */\n    get serviceManager() {\n        return this._serviceManager;\n    }\n    /**\n     * Attach the application shell to the DOM.\n     *\n     * @param id - The id of the host node for the shell, or `''`.\n     *\n     * #### Notes\n     * For this server application there is no shell to attach\n     */\n    attachShell(id) {\n        // no-op\n    }\n    /**\n     * A method invoked on a window `'resize'` event.\n     *\n     * #### Notes\n     * For this server application there is no shell to update\n     */\n    evtResize(event) {\n        // no-op\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach((item) => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach((mod) => {\n            this.registerPluginModule(mod);\n        });\n    }\n    /**\n     * Register the underlying lite service manager for this app.\n     *\n     * @param serviceManager The Service Manager for the app.\n     */\n    registerServiceManager(serviceManager) {\n        this._serviceManager = serviceManager;\n    }\n}\n","/**\n * A simple router.\n */\nexport class Router {\n    constructor() {\n        this._routes = [];\n    }\n    /**\n     * Add a new GET route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    get(pattern, callback) {\n        this._add('GET', pattern, callback);\n    }\n    /**\n     * Add a new PUT route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    put(pattern, callback) {\n        this._add('PUT', pattern, callback);\n    }\n    /**\n     * Add a new POST route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    post(pattern, callback) {\n        this._add('POST', pattern, callback);\n    }\n    /**\n     * Add a new PATCH route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    patch(pattern, callback) {\n        this._add('PATCH', pattern, callback);\n    }\n    /**\n     * Add a new DELETE route\n     *\n     * @param pattern The pattern to match\n     * @param callback The function to call on pattern match\n     *\n     */\n    delete(pattern, callback) {\n        this._add('DELETE', pattern, callback);\n    }\n    /**\n     * Route a request.\n     *\n     * @param req The request to route.\n     */\n    async route(req) {\n        const url = new URL(req.url);\n        const { method } = req;\n        const { pathname } = url;\n        for (const r of this._routes) {\n            if (r.method !== method) {\n                continue;\n            }\n            const match = pathname.match(r.pattern);\n            if (!match) {\n                continue;\n            }\n            const matches = match.slice(1);\n            let body;\n            if (r.method === 'PATCH' || r.method === 'PUT' || r.method === 'POST') {\n                try {\n                    body = JSON.parse(await req.text());\n                }\n                catch {\n                    body = undefined;\n                }\n            }\n            return r.callback.call(null, {\n                pathname,\n                body,\n                query: Object.fromEntries(url.searchParams),\n            }, ...matches);\n        }\n        throw new Error('Cannot route ' + req.method + ' ' + req.url);\n    }\n    /**\n     * Add a new route.\n     *\n     * @param method The method\n     * @param pattern The pattern\n     * @param callback The callback\n     */\n    _add(method, pattern, callback) {\n        if (typeof pattern === 'string') {\n            pattern = new RegExp(pattern);\n        }\n        this._routes.push({\n            method,\n            pattern,\n            callback,\n        });\n    }\n}\n","import { Router } from './router';\n/**\n * A (very, very) simplified Jupyter Server running in the browser.\n */\nexport class JupyterServer {\n    /**\n     * Construct a new JupyterServer.\n     */\n    constructor(options) {\n        this._router = new Router();\n        const { contents, kernels, kernelspecs, sessions, settings, translation } = options;\n        this._contents = contents;\n        this._kernels = kernels;\n        this._kernelspecs = kernelspecs;\n        this._sessions = sessions;\n        this._settings = settings;\n        this._translation = translation;\n        this._addRoutes();\n    }\n    /**\n     * Handle an incoming request from the client.\n     *\n     * @param req The incoming request\n     * @param init The optional init request\n     */\n    async fetch(req, init) {\n        if (!(req instanceof Request)) {\n            throw Error('Request info is not a Request');\n        }\n        return this._router.route(req);\n    }\n    /**\n     * Add the routes.\n     */\n    _addRoutes() {\n        const app = this._router;\n        // GET /api/contents/{path}/checkpoints - Get a list of checkpoints for a file\n        app.get('/api/contents/(.+)/checkpoints', async (req, filename) => {\n            const res = await this._contents.listCheckpoints(filename);\n            return new Response(JSON.stringify(res));\n        });\n        // POST /api/contents/{path}/checkpoints/{checkpoint_id} - Restore a file to a particular checkpointed state\n        app.post('/api/contents/(.+)/checkpoints/(.*)', async (req, filename, checkpoint) => {\n            const res = await this._contents.restoreCheckpoint(filename, checkpoint);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n        // POST /api/contents/{path}/checkpoints - Create a new checkpoint for a file\n        app.post('/api/contents/(.+)/checkpoints', async (req, filename) => {\n            const res = await this._contents.createCheckpoint(filename);\n            return new Response(JSON.stringify(res), { status: 201 });\n        });\n        // DELETE /api/contents/{path}/checkpoints/{checkpoint_id} - Delete a checkpoint\n        app.delete('/api/contents/(.+)/checkpoints/(.*)', async (req, filename, checkpoint) => {\n            const res = await this._contents.deleteCheckpoint(filename, checkpoint);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n        // GET /api/contents/{path} - Get contents of file or directory\n        app.get('/api/contents(.*)', async (req, filename) => {\n            var _a;\n            const options = {\n                content: ((_a = req.query) === null || _a === void 0 ? void 0 : _a.content) === '1',\n            };\n            const nb = await this._contents.get(filename, options);\n            if (!nb) {\n                return new Response(null, { status: 404 });\n            }\n            return new Response(JSON.stringify(nb));\n        });\n        // POST /api/contents/{path} - Create a new file in the specified path\n        app.post('/api/contents(.*)', async (req, path) => {\n            const options = req.body;\n            const copyFrom = options === null || options === void 0 ? void 0 : options.copy_from;\n            let file;\n            if (copyFrom) {\n                file = await this._contents.copy(copyFrom, path);\n            }\n            else {\n                file = await this._contents.newUntitled(options);\n            }\n            if (!file) {\n                return new Response(null, { status: 400 });\n            }\n            return new Response(JSON.stringify(file), { status: 201 });\n        });\n        // PATCH /api/contents/{path} - Rename a file or directory without re-uploading content\n        app.patch('/api/contents(.*)', async (req, filename) => {\n            var _a, _b;\n            const newPath = (_b = (_a = req.body) === null || _a === void 0 ? void 0 : _a.path) !== null && _b !== void 0 ? _b : '';\n            filename = filename[0] === '/' ? filename.slice(1) : filename;\n            const nb = await this._contents.rename(filename, newPath);\n            return new Response(JSON.stringify(nb));\n        });\n        // PUT /api/contents/{path} - Save or upload a file\n        app.put('/api/contents/(.+)', async (req, filename) => {\n            const body = req.body;\n            const nb = await this._contents.save(filename, body);\n            return new Response(JSON.stringify(nb));\n        });\n        // DELETE /api/contents/{path} - Delete a file in the given path\n        app.delete('/api/contents/(.+)', async (req, filename) => {\n            await this._contents.delete(filename);\n            return new Response(null, { status: 204 });\n        });\n        // POST /api/kernels/{kernel_id} - Restart a kernel\n        app.post('/api/kernels/(.*)/restart', async (req, kernelId) => {\n            const res = await this._kernels.restart(kernelId);\n            return new Response(JSON.stringify(res));\n        });\n        // DELETE /api/kernels/{kernel_id} - Kill a kernel and delete the kernel id\n        app.delete('/api/kernels/(.*)', async (req, kernelId) => {\n            const res = await this._kernels.shutdown(kernelId);\n            return new Response(JSON.stringify(res), { status: 204 });\n        });\n        // KernelSpecs\n        app.get('/api/kernelspecs', async (req) => {\n            const res = this._kernelspecs.specs;\n            return new Response(JSON.stringify(res));\n        });\n        // NbConvert\n        app.get('/api/nbconvert', async (req) => {\n            return new Response(JSON.stringify({}));\n        });\n        // GET /api/sessions/{session} - Get session\n        app.get('/api/sessions/(.+)', async (req, id) => {\n            const session = await this._sessions.get(id);\n            return new Response(JSON.stringify(session), { status: 200 });\n        });\n        // GET /api/sessions - List available sessions\n        app.get('/api/sessions', async (req) => {\n            const sessions = await this._sessions.list();\n            return new Response(JSON.stringify(sessions), { status: 200 });\n        });\n        // PATCH /api/sessions/{session} - This can be used to rename a session\n        app.patch('/api/sessions(.*)', async (req, id) => {\n            const options = req.body;\n            const session = await this._sessions.patch(options);\n            return new Response(JSON.stringify(session), { status: 200 });\n        });\n        // DELETE /api/sessions/{session} - Delete a session\n        app.delete('/api/sessions/(.+)', async (req, id) => {\n            await this._sessions.shutdown(id);\n            return new Response(null, { status: 204 });\n        });\n        // POST /api/sessions - Create a new session or return an existing session if a session of the same name already exists\n        app.post('/api/sessions', async (req) => {\n            const options = req.body;\n            const session = await this._sessions.startNew(options);\n            return new Response(JSON.stringify(session), { status: 201 });\n        });\n        // Settings\n        // TODO: improve the regex\n        // const pluginPattern = new RegExp(/(?:@([^/]+?)[/])?([^/]+?):(\\w+)/);\n        const pluginPattern = '/api/settings/((?:@([^/]+?)[/])?([^/]+?):([^:]+))$';\n        app.get(pluginPattern, async (req, pluginId) => {\n            const settings = await this._settings.get(pluginId);\n            return new Response(JSON.stringify(settings));\n        });\n        app.put(pluginPattern, async (req, pluginId) => {\n            const body = req.body;\n            const { raw } = body;\n            await this._settings.save(pluginId, raw);\n            return new Response(null, { status: 204 });\n        });\n        app.get('/api/settings', async (req) => {\n            const plugins = await this._settings.getAll();\n            return new Response(JSON.stringify(plugins));\n        });\n        app.get('/api/translations/?(.*)', async (req, locale) => {\n            const data = await this._translation.get(locale || 'all');\n            return new Response(JSON.stringify(data));\n        });\n    }\n}\n","import { ServiceManager, ServerConnection } from '@jupyterlab/services';\nimport { WebSocket } from 'mock-socket';\n/**\n * A custom ServiceManager to run in the browser\n */\nexport class LiteServiceManager extends ServiceManager {\n    /**\n     * Construct a new service provider.\n     *\n     * @param options The instantiation options for the service manager.\n     */\n    constructor(options) {\n        var _a;\n        const server = options.server;\n        super({\n            ...options,\n            serverSettings: {\n                ...ServerConnection.makeSettings(),\n                WebSocket,\n                fetch: (_a = server.fetch.bind(server)) !== null && _a !== void 0 ? _a : undefined,\n            },\n        });\n        this._server = server;\n    }\n    /**\n     * Get the underlying Jupyter Server\n     */\n    get server() {\n        return this._server;\n    }\n}\n"],"names":["JupyterLiteServer","Application","constructor","options","super","this","name","namespace","version","_serviceManager","serviceManager","attachShell","id","evtResize","event","registerPluginModule","mod","data","default","Object","prototype","hasOwnProperty","call","Array","isArray","forEach","item","registerPlugin","error","console","registerPluginModules","mods","registerServiceManager","Router","_routes","get","pattern","callback","_add","put","post","patch","delete","async","req","url","URL","method","pathname","r","match","matches","slice","body","JSON","parse","text","undefined","query","fromEntries","searchParams","Error","RegExp","push","JupyterServer","_router","contents","kernels","kernelspecs","sessions","settings","translation","_contents","_kernels","_kernelspecs","_sessions","_settings","_translation","_addRoutes","init","Request","route","app","filename","res","listCheckpoints","Response","stringify","checkpoint","restoreCheckpoint","status","createCheckpoint","deleteCheckpoint","_a","content","nb","path","copyFrom","copy_from","file","copy","newUntitled","_b","newPath","rename","save","kernelId","restart","shutdown","specs","session","list","startNew","pluginPattern","pluginId","raw","plugins","getAll","locale","LiteServiceManager","ServiceManager","server","serverSettings","ServerConnection","WebSocket","fetch","bind","_server"],"sourceRoot":""}